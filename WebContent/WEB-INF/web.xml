<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" version="4.0">
  <display-name>jsp20220405</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
 
  <listener>
  	<listener-class>chap20.ServletContextListener03</listener-class>
  </listener>	
  
  <!-- application 설정파일 -->
  
  <!-- context-param application객체에 담아서 사용-->
  <!-- 주로 공통사용자 정보를 담음-->
  <!-- application전체에서 사용가능 -->
  <context-param>
  	<param-name>initParamName1</param-name>
  	<param-value>initParamValue1</param-value>
  </context-param>
  
  <context-param>
  	<param-name>adminEmail</param-name>
  	<param-value>admin1234@gmail.com</param-value>
  </context-param>
  
  <session-config>
  	<!-- session유지시간 기본값 : 30분 -->
  	<!-- 마지막 접근 후 유지시간 지나면 session 삭제됨 -->
  	<!-- 단위 : 분(minutes) -->
  	<session-timeout>30</session-timeout>
  </session-config>
  
  <!-- servlet 설정 -->
  <!-- 설정파일에서 클래스명이 servlet이름으로 자동으로 되기 때문에 다른 package에서 같은이름으로 servlet을 만들 수 없음. -->
  <!-- url pattern의 경로가 오게 되면, 실제로 동작하는 servlet class로 mapping되어 동작함. -->
  <servlet>
  	<servlet-name>S3Servlet01</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet01</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet01</servlet-name>
  	<url-pattern>/s3/servlet01</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S3Servlet02</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet02</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet02</servlet-name>
  	<url-pattern>/s3/servlet02</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S3Servlet03</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet03</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet03</servlet-name>
  	<url-pattern>/s3/servlet03</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S3Servlet04</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet04</servlet-class>
  	<!-- 매우 오래 걸리는 요청을 미리 받아서 실행 시킬 수 있게 하는 option tag. 숫자가 작을수록 먼저 실행됨.-->
  	<load-on-startup>1</load-on-startup>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet04</servlet-name>
  	<url-pattern>/s3/servlet04</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S3Servlet05</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet05</servlet-class>
  	<!-- 필요한 파라미터 값 설정 가능 -->
  	<init-param>
  		<param-name>param1</param-name>
  		<param-value>value1</param-value>
  	</init-param>
  	<init-param>
  		<param-name>dbUrl</param-name>
  		<param-value>MariaDB</param-value>
  	</init-param>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet05</servlet-name>
  	<url-pattern>/s3/servlet05</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S3Servlet06</servlet-name>
  	<servlet-class>chap17.servlet3.S3Servlet06</servlet-class>
  	<init-param>
  		<!-- 경로 설정 -->
  		<param-name>viewName</param-name>
  		<param-value>/WEB-INF/view/chap17/ex06.jsp</param-value>
  	</init-param>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S3Servlet06</servlet-name>
  	<url-pattern>/s3/servlet06</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S4Servlet01</servlet-name>
  	<servlet-class>chap17.servlet4.S4Servlet01</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S4Servlet01</servlet-name>
  	<!-- 정확한 경로를 작성 안해도 실행시킬 수 있음 -->
  	<!-- <url-pattern>/s4/servlet01</url-pattern> -->
  	<!-- pattern matching -->
  	<!-- <url-pattern>/s4/url1/url2/*</url-pattern> -->
  	<!-- 확장자 매칭 -->
  	<!-- <url-pattern>*.do</url-pattern> -->
  	<!-- 매칭되는 패턴이 없을때 명시되지 않은 모든 요청 -->
  	<url-pattern>/</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S4Servlet02</servlet-name>
  	<servlet-class>chap17.servlet4.S4Servlet02</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S4Servlet02</servlet-name>
  	<url-pattern>/s4/s4servlet/*</url-pattern>
  </servlet-mapping>
  
  <servlet>
  	<servlet-name>S4Servlet03</servlet-name>
  	<servlet-class>chap17.servlet4.S4Servlet03</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>S4Servlet03</servlet-name>
  	<url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
  <!-- filters -->
  <!-- filter의 순서를 정할 수 있음. 위의 코드부터 우선 실행 -->
  <!-- annotation 사용시 필터 순서를 정할 수 없음 -->
  <!-- filter는 servlet처럼 우선순위가 없음. 일치하면 일치하는대로 filter를 적은 순서대로 다 일함. -->
  <filter>
  	<filter-name>filter01</filter-name>
  	<filter-class>chap19.Filter01</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>filter01</filter-name>
  	<url-pattern>/s3/servlet06</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>filter02</filter-name>
  	<filter-class>chap19.Filter02</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>filter02</filter-name>
  	<url-pattern>/s3/servlet06</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>filter03</filter-name>
  	<filter-class>chap19.Filter03</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>filter03</filter-name>
  	<url-pattern>/s3/*</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>filter04</filter-name>
  	<filter-class>chap19.Filter04</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>filter04</filter-name>
  	<url-pattern>/s5/*</url-pattern>
  </filter-mapping>
  
  <filter>
  	<filter-name>filter05</filter-name>
  	<filter-class>chap19.Filter05</filter-class>
  </filter>
  
  <filter-mapping>
  	<filter-name>filter05</filter-name>
  	<url-pattern>/s5/memberOnly</url-pattern>
  </filter-mapping>
  
 
  
</web-app>